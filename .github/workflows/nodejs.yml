name: Master Commits CI

on: 
  push:
    branches: 
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: 
        - 14

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run lint

  build:
    needs: lint

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: 
        # - 8.x
        # - 10.x
        - 12.x
        - 13.x
        - 14.x
        - 15.x
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test
      env:
        CI: "true"

  release: 
    runs-on: ubuntu-latest
    needs: build
    if: github.actor == 'phish108' 

    steps:
      - name: check hold
        id: holdrelease
        uses: actions/github-script@v3
        with:
          script: |
            result = await github.request(context.payload.repository.compare_url, {
                base: context.payload.before,
                head: context.payload.after
              })

            files = result.data.files.map(file => file.filename)

            hold1 = files
              .map(file => (file.startsWith('.github/') || 
                            file.startsWith('tests/') ||
                            file.startsWith('test/') || 
                            file.startsWith('.gitignore')))
              .reduce((sw,c) => (sw && c), true)

            core.info("protected directories? " + hold1)
            core.setOutput('hold_protected', hold1)

            isdevChange = 0
            isotherChange = 0

            hold2 = files
              .map(file => (file == 'package.json' || 
                            file == 'package-lock.json'))
              .reduce((sw,c) => (sw && c), true)

            core.info("package info only? " + hold2)
            core.setOutput('hold_package', hold2)

            if (hold2) {
              pInfo = result.data.files.
                filter(file => file.filename == "package.json")

              pFile = await github.request(pInfo[0].raw_url)
              devDeps = Object.keys(JSON.parse(pFile.data).devDependencies)

              changes = pInfo[0].patch
                .split("\n")
                .filter(change => change.match(/^[+-]\s*/))
                .map(change => change.replace(/^[+-]\s*"([^"]+).*$/, "$1"))
                .filter(change => change && change.length)
                
              isdevChange = changes
                .filter(change => devDeps.includes(change))
                .length
              
              isotherChange = changes.length - isdevChange
            }

            hold3 = (isdevChange > 0 && isotherChange == 0)
            if (hold3) {
              core.info("is dev only change. HOLD!")
            }

            core.setOutput('hold_testing', hold3)
            core.setOutput('proceed', !(hold1 || hold3))

      - name: trigger release activity
        uses: actions/github-script@v3
        if: ${{ steps.holdrelease.outputs.proceed == true }}
        with:
          github-token: ${{ secrets.TRIGGER_TOKEN }}
          script: |
            core.info("release via release activity")
            await github.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.ref,
                workflow_id: "release.yml"
              })
